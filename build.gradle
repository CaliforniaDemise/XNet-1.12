plugins {
    id 'java'
    id 'java-library'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.33'
}

group= "com.github.mcjty"
archivesBaseName = "xnet"

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

minecraft {
    mcVersion = "1.12.2"
    useDependencyAccessTransformers = true
}

repositories {
    exclusiveContent {
        forRepository {
            maven {
                url "https://cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name 'OC Repo'
        url "https://maven.cil.li/"
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // McJtyLib
        url "https://maven.k-4u.nl"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    implementation rfg.deobf("mezz.jei:jei_${jei_version}")
    implementation rfg.deobf("curse.maven:hwyla-253449:2568751")
    implementation rfg.deobf("curse.maven:top-245211:2667280")
    implementation rfg.deobf("com.github.mcjty:intwheel:${intwheel_version}")

    if (!project.hasProperty("singleproject")) {
        implementation rfg.deobf("com.github.mcjty:mcjtylib:${mcjtylib_version}")
        implementation (rfg.deobf("com.github.mcjty:rftools:1.12-7.70")) {
            transitive = false
        }
    } else {
	    implementation project(':McJtyLib')
	    implementation project(':RFTools')
    }

    compileOnly "curse.maven:tesla-244651:2487959"
    compileOnly "li.cil.oc:OpenComputers:${oc_version}"
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        fcd.expand (
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }
}

artifacts {
    //archives sourcesJar
    // archives deobfJar
}

task("uploadJars", dependsOn: "reobf") {
    description = "uploads JARs"
    if (System.getenv("local_maven") != null) {
        apply plugin: 'maven'
        uploadArchives {
            repositories {
                mavenDeployer {
                    repository(url: "file://" + System.getenv("local_maven"))
                    pom {
                        groupId = project.group
                        version = project.version
                        artifactId = project.archivesBaseName
                        project {
                            name project.archivesBaseName
                            packaging 'jar'
                            description 'XNet'
                            scm {
                                url 'https://github.com/McJty/XNet'
                                connection 'scm:git:git@github.com:McJty/XNet.git'
                                developerConnection 'scm:git:git@github.com:McJty/XNet.git'
                            }
                            issueManagement {
                                system 'github'
                                url 'https://github.com/McJty/XNet/issues'
                            }
                            licenses {
                                license {
                                    name 'MIT'
                                    distribution 'repo'
                                }
                            }
                            developers {
                                developer {
                                    id 'McJty'
                                    name 'McJty'
                                    roles { role 'developer' }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "${modname} ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>");
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>");
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

/*tasks.curseforge.enabled = project.hasProperty('curseforge_key')

curseforge {
    if (project.hasProperty('curseforge_key')) {
        apiKey = project.curseforge_key
    }

    project {
        id = project.projectId
        changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG').equals('none') ? getChangelogText() : System.getenv('CHANGELOG')
        changelogType = 'html'
        releaseType = project.curse_type
        addGameVersion '1.12.2'
        mainArtifact(jar) {
            displayName = "${modname} - ${version}"
        }
        relations {
            requiredLibrary 'mcjtylib'
            optionalLibrary 'the-one-probe'
            optionalLibrary 'rftools'
            optionalLibrary 'redstone-flux'
            optionalLibrary 'rftools-control'
        }
    }
}*/
